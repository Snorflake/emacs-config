# -*- mode: org -*-
# -*- coding: utf-8 -*-
#+STARTUP: overview indent inlineimages logdrawer
#+TITLE: Journal
#+AUTHOR: Aria
#+LANGUAGE: en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc

* Initial looks and fixes
** MELPA
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(setq package-archives
'(("MELPA" . "https://melpa.org/packages/")))
#+END_SRC
** Ensure packages installed
First the function and preliminary
#+BEGIN_SRC emacs-lisp
  (defun ensure-package-installed (&rest packages)
    (mapcar
     (lambda (package)
       (if (package-installed-p package) nil
         (if (y-or-n-p (format "Package %s is missing. Install it? " package))
             (package-install package)
           package)))
     packages))

  (or (file-exists-p package-user-dir)
      (package-refresh-contents))
#+END_SRC

Now the packages
#+BEGIN_SRC emacs-lisp
  (ensure-package-installed   'evil
                              'evil-leader
                              'evil-org
                              'evil-surround
                              'evil-mu4e
                              'company
                              'web-mode
                              'helm
                              'magit
                              'solarized-theme
                              'rainbow-delimiters
                              'flymake-ruby
                              'projectile
                              'helm-projectile
                              'powerline
                              'ruby-end
                              'emmet-mode
                              'better-defaults
                              'linum-relative
                              'android-mode
                              'org-bullets
                              'go-mode
                              'exec-path-from-shell
                              'go-autocomplete
                              'go-eldoc
                              'flycheck-gometalinter
                              'wanderlust
                              'company-irony
                              )
#+END_SRC
** Loading babel
#+BEGIN_SRC emacs-lisp
(require 'org-install)
(require 'org)
#+END_SRC
** Turn off menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
** Remove splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC
** Change all yes/no questions to y/n type
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Solarized
#+BEGIN_SRC emacs-lisp
(load-theme 'solarized-dark t)
#+END_SRC
** Line numbers
#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
(column-number-mode 1)

(require 'linum-relative)
(linum-relative-global-mode)
#+END_SRC
** Stop littering everywhere with save files
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs-backups")))
#+END_SRC
** Nice completion for commands
#+BEGIN_SRC emacs-lisp
(ido-mode 1)
(setq ido-enable-flex-matching t)
(setq ido0everywhere t)
#+END_SRC
** Params
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC
Auto pair parentheses
#+BEGIN_SRC emacs-lisp
(electric-pair-mode)
#+END_SRC
** Project-ation
#+BEGIN_SRC emacs-lisp
(require 'projectile)
(projectile-global-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'helm-config)
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)
#+END_SRC
** Compile-friendly keybinds
#+BEGIN_SRC emacs-lisp
(global-set-key [f3] 'compile)
(global-set-key [f4] 'next-error)
#+END_SRC
** Get PATH from environment
#+BEGIN_SRC emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$"
                            ""
                            (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq eshell-path-env path-from-shell) ; for eshell users
      (setq exec-path (split-string path-from-shell path-separator))))

  (when window-system (set-exec-path-from-shell-PATH))
#+END_SRC
* Evil mode
** Requirements
#+BEGIN_SRC emacs-lisp
(require 'evil)
(require 'evil-leader)
(require 'evil-org)
(require 'evil-surround)
(require 'evil-mu4e)
#+END_SRC
** Leaders
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-leader "\\")
  (evil-leader/set-key "q" 'kill-this-buffer)
  (evil-leader/set-key "p" 'fill-paragraph)
  (evil-leader/set-key "a" 'align)
  (evil-leader/set-key "<tab>" 'indent-region)
  (evil-leader/set-key ";" 'comment-dwim)
  (evil-leader/set-key "g" 'magit-status)
  (evil-leader/set-key "u" 'undo-tree-visualize)
  (evil-leader/set-key "e" 'helm-projectile)
  (evil-leader/set-key "b" 'helm-buffers-list)
  (evil-leader/set-key "m" 'wl)
  (global-evil-leader-mode)               ;
  (global-evil-surround-mode)
#+END_SRC
** Enable evil-mode
#+BEGIN_SRC emacs-lisp
  (evil-mode 1)
#+END_SRC
* Org
** Org bullets
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
** Other cosmetics 
** Default directory
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org/")
#+END_SRC 
* Autocompletion
** Company
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)

  (eval-after-load 'company
    '(progn
       (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
       (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)))
#+END_SRC
** C++
Irony mode for company
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-irony))
#+END_SRC 
** Ruby
#+BEGIN_SRC emacs-lisp
(require 'flymake-ruby)
(add-hook 'ruby-mode-hook 'flymake-ruby-load)
#+END_SRC
** Android
#+BEGIN_SRC emacs-lisp
(require 'android-mode)
#+END_SRC
** Golang
Godoc fix
#+BEGIN_SRC emacs-lisp
  (setenv "GOPATH" "/home/aria/projects/gocode")
#+END_SRC
Gofmt before save
#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "/home/aria/projects/gocode/bin")
  (add-hook 'before-save-hook 'gofmt-before-save)
#+END_SRC
Autocompletion
#+BEGIN_SRC emacs-lisp
  (require 'auto-complete-config)
  (require 'go-autocomplete)
  (require 'flycheck-gometalinter)
  (flycheck-gometalinter-setup)
  (add-hook 'go-mode-hook 'auto-complete-mode)
#+END_SRC
Imports
#+BEGIN_SRC emacs-lisp
  (defun go-mode-setup ()
    (go-eldoc-setup)
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save))
  (add-hook 'go-mode-hook 'go-mode-setup)
#+END_SRC
Linting
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat (getenv "GOPATH")
                                 "/src/github.com/golang/lint/misc/emacs"))
  (require 'golint)
#+END_SRC
* Web
** Requirements
#+BEGIN_SRC emacs-lisp
(require 'web-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'emmet-mode)
#+END_SRC
** Add files to web-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.scss?\\'" . web-mode))
#+END_SRC
** Enable emmet
#+BEGIN_SRC emacs-lisp
(add-hook 'sgml-mode-hook 'emmet-mode)
#+END_SRC
* Email
** Setup wanderlust
#+BEGIN_SRC emacs-lisp
  (autoload 'wl "wl" "Wanderlust" t)


  (setq wl-message-ignored-field-list '("^.*:")
        wl-message-visible-field-list
        '("^\\(To\\|CC\\):"
          "^Subject:"
          "^\\(From\\|Reply-To\\):"
          "^Organization:"
          "^Message-Id:"
          "^\\(Posted\\|Date\\):"
          )
        wl-message-sort-field-list
        '("^From"
          "^Organization:"
          "^X-Attribution:"
          "^Subject"
          "^Date"
          "^To"
          "^Cc"
          )
        )
#+END_SRC
** Setup gmail
#+BEGIN_SRC emacs-lisp
  (setq elmo-imap4-default-server "imap.gmail.com"
        elmo-imap4-default-user "blackstab1337@gmail.com"
        elmo-imap4-default-authenticate-type 'clear
        elmo-imap4-default-port '993
        elmo-imap4-default-stream-type 'ssl

        elmo-imap4-use-modified-utf7 t)

  (setq wl-smtp-connection-type 'starttls
        wl-smtp-posting-port 587
        wl-smtp-authenticate-type "plain"
        wl-smtp-posting-user "blackstab1337"
        wl-smtp-posting-server "smtp.gmail.com"
        wl-local-domain "gmail.com"
        wl-message-id-domain "smtp.gmail.com")

  (setq wl-from "Aria <blackstab1337@gmail.com>"
        wl-default-folder "%inbox"
        ;; wl-draft-folder "%[Gmail]/Drafts"
        wl-draft-folder ".draft"
        wl-trash-folder "%[Gmail]/Trash"

        wl-fcc-force-as-read t

        wl-default-spec "%")
#+END_SRC 
* Small changes 
** C indent style
#+BEGIN_SRC emacs-lisp
  (setq c-default-stype "k&r")
  (setq c-basic-offset 2)
#+END_SRC
